/** * Copyright 2004 - 2010 Northwestern University and Jonathan A. Smith * * <p>Licensed under the Educational Community License, Version 2.0 (the * "License"); you may not use this file except in compliance with the * License. You may obtain a copy of the License at</p> * * http://www.osedu.org/licenses/ECL-2.0 * * <p>Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an "AS IS" * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express * or implied. See the License for the specific language governing * permissions and limitations under the License.</p> */package origami.trees{	/**	 * A generic tree node class that implements PropertyHolder. A PropertyConverter	 * instance may be installed to build trees from an XML representation or to	 * convert trees to XML.	 *	 * @author Jonathan A. Smith	 */	public class LeafNode extends TreeNode	{		/** Parent in tree. */		private var __parent: InternalNode;		/**		 * Constructs a LeafNode.		 */		function LeafNode()		{			__parent = null;		}		// **** Parents and Children		/**		 * Returns parent node (or null if none).		 *		 * @return Parent node or null		 */		override public function get parent(): InternalNode		{			return __parent;		}		/**		 * Returns an array of children. (Always an empty array.)		 *		 * @return Array of children (empty list)		 */		override public function get children(): Array		{			return [];		}		/**		 * Returns true only if this node has children. (Always false)		 *		 * @return false -- has no children		 */		override public function hasChildren(): Boolean		{			return false;		}		/**		 * Returns true only if this is a root node.		 *		 * @return True if this is the root node, false otherwise		 */		override public function isRoot(): Boolean		{			return parent == null;		}		// **** Add and Remove Children		/**		 * Determine if a node can be a child of this node. (Never)		 *		 * @param child proposed child node		 * @return False (unable to add child nodes)		 */		override public function canAccept(child: TreeNode): Boolean		{			return false;		}		/**		 * Called when this node is added to another.		 *		 * @param parent new parent node		 */		override internal function addedTo(parent: InternalNode): void		{			if (__parent != null && parent != __parent)				throw new TreeStructureError("Tree node has two parents");			__parent = parent;		}		/**		 * Called when this node is removed from its parent.		 *		 * @param parent node that this node is being removed from		 */		override public function removedFrom(parent: InternalNode): void		{			if (__parent != null && parent != __parent)				throw new TreeStructureError(						"Tree node removed from wrong parent");			__parent = null;		}		// **** Descendants and Ancestors		/**		 * Returns True only if one node is an ancestor of another.		 *		 * @param descendant possible descendant node		 * @return False (this node has not descendants.)		 */		override public function isAncestorOf(descendant: InternalNode): Boolean		{			return false;		}		/**		 * Returns an array of ancestors from this node up to (not including)		 * a specified top node.		 *		 * @param stop (optional) node to stop search		 * @return Array of tree nodes		 */		override public function ancestorsBelow(stop: InternalNode): Array		{			var ancestor_list: Array = [];			var current: TreeNode = this;			while (current != null && current != stop)			{				ancestor_list.push(current);				current = current.parent;			}			return ancestor_list;		}		/**		 * Returns an array of ancestors from this node up to the root.		 *		 * @return Array of ancestor nodes		 */		override public function ancestors(): Array		{			return ancestorsBelow(null);		}		/**		 * Returns an array of descendants of a specified node. The nodes in		 * the returned list are in post-order, that is leaf nodes before		 * parents.		 *		 * @return Array of descendent nodes		 */		override public function descendents(): Array		{			return [];		}	}}