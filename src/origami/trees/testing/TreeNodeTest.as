/** * Copyright 2004 - 2010 Northwestern University and Jonathan A. Smith * * <p>Licensed under the Educational Community License, Version 2.0 (the * "License"); you may not use this file except in compliance with the * License. You may obtain a copy of the License at</p> * * http://www.osedu.org/licenses/ECL-2.0 * * <p>Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an "AS IS" * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express * or implied. See the License for the specific language governing * permissions and limitations under the License.</p> */package origami.trees.testing{    import flexunit.framework.TestCase;    import flexunit.framework.TestSuite;	import origami.trees.TreeNode;	import origami.trees.InternalNode;	import origami.trees.LeafNode;	// Test case for TreeNode objects.	public class TreeNodeTest extends TestCase	{	    private var top: InternalNode;	    private var left_node: TreeNode;	    private var right_node: TreeNode;		public function TreeNodeTest(method: String)		{			super(method);		}	    override public function setUp(): void	    {	        top = new InternalNode();	        left_node = new LeafNode();	        top.addChild(left_node);	        right_node = new LeafNode();	        top.addChild(right_node);	    }	    public function testHasChildren(): void	    {	        assertFalse(left_node.hasChildren());	        assertFalse(right_node.hasChildren());	        assertTrue(top.hasChildren());	    }	    public function testGetChildren(): void	    {	        var children: Array = top.children;	        assertEquals(2, children.length);	        assertEquals(left_node, children[0]);	        assertEquals(right_node, children[1]);	        assertEquals(0, left_node.children.length);	        assertEquals(0, right_node.children.length);	    }	    public function testGetParent(): void	    {	        assertEquals(top, left_node.parent);	        assertEquals(top, right_node.parent);	        assertEquals(null, top.parent);	    }	    public function testRoot(): void	    {	        assertTrue(top.isRoot());	        assertFalse(left_node.isRoot());	        assertFalse(right_node.isRoot());	        assertEquals(top, top.getRoot());	        assertEquals(top, left_node.getRoot());	        assertEquals(top, right_node.getRoot());	    }	    public function testAccept(): void	    {	        assertTrue(top.canAccept(new LeafNode()));	        assertTrue(top.canAccept(left_node));	        assertFalse(left_node.canAccept(new LeafNode()));	        assertFalse(top.canAccept(top));	    }	    public function testRemove(): void	    {	        left_node.remove();	        assertEquals(1, top.children.length);	        assertEquals(null, left_node.parent);	        right_node.remove();	        assertEquals(0, top.children.length);	        assertEquals(null, right_node.parent);	    }	    public function testIndex(): void	    {	        assertEquals(-1, top.getIndex()  );	        assertEquals( 0, left_node.getIndex() );	        assertEquals( 1, right_node.getIndex());	    }	    public function testReplaceChildren(): void	    {	        top.replaceChildren(right_node);	        assertNull(left_node.parent);	        assertEquals(1, top.children.length);	        top.replaceChildren(right_node, left_node);	        assertEquals(2, top.children.length);	        assertEquals(1, left_node.getIndex());	        assertEquals(0, right_node.getIndex());	    }	    public function testGetChildOfClass(): void	    {	        var n1: InternalNode = new InternalNode();	        top.addChild(n1);	        assertEquals(n1, top.getChildOfClass(InternalNode));	    }	    public function testListeners(): void	    {	    	/*	        var h: TestListener = new TestListener();	        top.addListener("onChanged", h);	        assertFalse(h.isNotified());	        assertFalse(22 == h.getArgument());	        assertFalse(top == h.getSource());	        top.broadcast("onChanged", 44);	        assertTrue(h.isNotified());	        assertEquals(44, h.getArgument());	        assertEquals(top, h.getSource());	        left_node.broadcast("onChanged", 51);	        assertEquals(51, h.getArgument());	        assertEquals(left_node, h.getSource());	        */	    }        public static function suite(): TestSuite        {            var suite: TestSuite = new TestSuite();            suite.addTest(new TreeNodeTest("testHasChildren"));            suite.addTest(new TreeNodeTest("testGetChildren"));            suite.addTest(new TreeNodeTest("testGetParent"));            suite.addTest(new TreeNodeTest("testRoot"));            suite.addTest(new TreeNodeTest("testAccept"));            suite.addTest(new TreeNodeTest("testRemove"));            suite.addTest(new TreeNodeTest("testIndex"));            suite.addTest(new TreeNodeTest("testReplaceChildren"));            suite.addTest(new TreeNodeTest("testGetChildOfClass"));            suite.addTest(new TreeNodeTest("testListeners"));            return suite;        }	}}